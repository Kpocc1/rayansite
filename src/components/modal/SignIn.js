import { useEffect, useState } from 'react';
import { Alert, Button, Divider, Form, Input, Typography } from 'antd';
import InputMask from 'react-input-mask';
import OTPInput from 'react-otp-input';

import {
	postAuthCodeSend,
	postAuthCodeValidate,
} from 'store/slices/customerSlice';
import useCustomer from 'hooks/useCustomer';

const SignIn = () => {
	const [status, setStatus] = useState({ type: '', text: '' });
	const [telephone, setTelephone] = useState('');
	const [code, setCode] = useState();
	const [method, setMethod] = useState('sms'); // ‚úÖ –ù–û–í–û–ï: –≤—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏

	const { setCustomer, customer } = useCustomer();

	const handleTelephone = e => {
		const clean = e.target.value.replace(/\(|\)|-| /g, () => '');
		setTelephone(clean.split('_')[0]);
	};

	const handleSubmitTelephone = async () => {
		// ‚úÖ –ù–û–í–û–ï: —Ä–∞–∑–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–µ—Ç–æ–¥–∞
		const statusText =
			method === 'whatsapp'
				? '–ö–æ–¥ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ WhatsApp'
				: '–ù–∞ –í–∞—à –Ω–æ–º–µ—Ä –ø—Ä–∏–¥–µ—Ç —Å–º—Å —Å –∫–æ–¥–æ–º';
		setStatus({ type: 'info', text: statusText });
		const res = await postAuthCodeSend(telephone, method); // ‚úÖ –ü–µ—Ä–µ–¥–∞–µ–º method
		setCode(res);
		setStatus();
	};

	const handleCode = async value => {
		if (value.length === 4) {
			setStatus({ type: 'info', text: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞...' });
			console.log(value);
			const res = await postAuthCodeValidate(telephone, value);
			if (res.status === 'success') {
				// —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∏ –≤–æ–π—Ç–∏
				setStatus({ type: 'info', text: res.text });
				setCustomer({
					...res.customer_info,
					store_id: customer.store_id || 0,
				});
				window.location.reload();
			} else {
				setStatus({ type: 'error', text: res.text });
				console.log('–ö–æ–¥ –≤–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω–æ');
			}
		}
	};

	const handleClearCode = () => {
		setCode();
	};

	return (
		<div style={{ height: 'auto' }}>
			{code ? (
				<CodeForm
					handleCode={handleCode}
					handleClearCode={handleClearCode}
					code={code}
					status={status}
					method={method}
				/>
			) : (
				<TelephoneForm
					handleSubmitTelephone={handleSubmitTelephone}
					handleTelephone={handleTelephone}
					telephone={telephone}
					status={status}
					method={method}
					setMethod={setMethod}
				/>
			)}
		</div>
	);
};

const CodeForm = ({ handleCode, handleClearCode, code, status, method }) => {
	function fmtMSS(s) {
		return (s - (s %= 60)) / 60 + (9 < s ? ':' : ':0') + s;
	}

	const AgainCode = () => {
		const [timer, setTimer] = useState(120);
		const handleSubmitTelephone = async () => {
			setTimer(120);
			const res = await postAuthCodeSend(code.telephone);
		};
		useEffect(() => {
			const interval = setInterval(() => {
				// console.log(timer)
				if (timer > 0) setTimer(timer - 1);
			}, 1000);
			return () => clearInterval(interval);
		}, [timer]);

		return (
			<p>
				{timer === 0 ? (
					<Button type='primary' size='large' onClick={handleSubmitTelephone}>
						–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ
					</Button>
				) : (
					<a href='#' onClick={e => e.preventDefault()}>
						{`–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ —á–µ—Ä–µ–∑ ${fmtMSS(timer)}`}
					</a>
				)}
			</p>
		);
	};

	return (
		<Form name='signin-code' layout='vertical'>
			<Typography.Title
				level={5}
				className='text-gray'
				style={{ marginTop: 0, marginBottom: 12 }}
			>
				–ú—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∫–æ–¥{method === 'whatsapp' ? ' –≤ WhatsApp' : ' –ø–æ SMS'} –Ω–∞
				–Ω–æ–º–µ—Ä
				<br />
				{code.telephone}
			</Typography.Title>
			<Form.Item
				name='code'
				label={method === 'whatsapp' ? '–ö–æ–¥ –∏–∑ WhatsApp' : '–ö–æ–¥ –∏–∑ —Å–º—Å'}
				rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥' }]}
				style={{ marginBottom: 16 }}
			>
				{/* <Input.OTP
          autoFocus
          length={4}
          size="large"
          onChange={handleCode}
          disabled={status?.type ? status.type === "success" : false}
        /> */}
				<OTPInput
					onChange={handleCode}
					numInputs={4}
					inputType='number'
					shouldAutoFocus
					renderSeparator={<span className='ml-10 mr-10'>-</span>}
					renderInput={props => (
						<Input
							{...props}
							className='rn-otp-input'
							disabled={status && status.type === 'info'}
						/>
					)}
				/>
			</Form.Item>
			<AgainCode />
			{status?.type && (
				<Alert message={status.text} type={status.type} banner />
			)}
		</Form>
	);
};

const TelephoneForm = ({
	handleSubmitTelephone,
	handleTelephone,
	telephone,
	status,
	method,
	setMethod,
}) => (
	<Form
		name='signin-telephone'
		layout='vertical'
		onFinish={handleSubmitTelephone}
	>
		<Typography.Title level={2} style={{ marginBottom: 8 }}>
			–í–æ–π—Ç–∏ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
			<Typography.Title
				level={5}
				className='text-gray'
				style={{ marginTop: 8, marginBottom: 0 }}
			>
				–ß—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∫–æ—Ä–∑–∏–Ω—É, –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∫—É–ø–æ–∫, –¥–æ–±–∞–≤–ª—è—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ,
				—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∞–∫—Ü–∏—è—Ö –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö
			</Typography.Title>
		</Typography.Title>
		<Form.Item
			name='telephone'
			label='–í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω'
			style={{ marginBottom: 16 }}
		>
			<InputMask
				mask='+7 (999) 999-99-99'
				onChange={handleTelephone}
				disabled={!!status?.type}
			>
				<Input />
			</InputMask>
		</Form.Item>

		{/* ‚úÖ –ù–û–í–û–ï: –í—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞ */}
		<Form.Item label='–ö–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥?' style={{ marginBottom: 16 }}>
			<Button.Group style={{ width: '100%' }}>
				<Button
					type={method === 'sms' ? 'primary' : 'default'}
					onClick={() => setMethod('sms')}
					disabled={!!status?.type}
					style={{ width: '50%' }}
				>
					üì± SMS
				</Button>
				<Button
					type={method === 'whatsapp' ? 'primary' : 'default'}
					onClick={() => setMethod('whatsapp')}
					disabled={!!status?.type}
					style={{ width: '50%' }}
				>
					üí¨ WhatsApp
				</Button>
			</Button.Group>
		</Form.Item>

		<Form.Item style={{ marginBottom: 12 }}>
			<Button
				type='primary'
				htmlType='submit'
				block
				size='large'
				disabled={telephone.length < 12}
				loading={!!status?.type}
			>
				–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥
			</Button>
		</Form.Item>
		<p style={{ marginBottom: 8, marginTop: 0 }}>
			–ü—Ä–æ–¥–æ–ª–∂–∞—è –í—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
		</p>
		{status?.type && <Alert message={status.text} type={status.type} banner />}
	</Form>
);

export default SignIn;
