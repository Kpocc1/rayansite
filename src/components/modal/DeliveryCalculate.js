import { useEffect, useRef, useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { Alert, Button, Col, Row, Spin } from 'antd';

import {
	setDeliveryModalIsOpen,
	setDeliveryModalData,
} from 'store/slices/layoutSlice';
import { calcBasedOnYaTaxi } from 'store/slices/cartSlice';
import HeadingTitle from 'components/HeadingTitle';
import useBreakpoint from 'hooks/useBreakpoint';
import { formatCurrency } from 'helpers/formatter';
import { geoObjectDisplayName } from 'helpers/suggest-provider';

const DeliveryCalculate = () => {
	const mapRef = useRef();
	const suggestRef = useRef();
	const mapIsCreated = useRef();
	const [error, setError] = useState('');
	const [loading, setLoading] = useState(false);
	const dispatch = useDispatch();
	const { data: store } = useSelector(state => state.layout.mainInfo);
	const { isDesktop } = useBreakpoint();

	const { address, costAddress } = useSelector(
		state => state.layout.deliveryModalData
	);

	const handleSetData = ({ address, costAddress }) => {
		dispatch(
			setDeliveryModalData({
				address,
				costAddress,
			})
		);
		setLoading(false);
	};

	const setDataCb = address => {
		return costAddress => {
			handleSetData({ address, costAddress });
		};
	};

	const handleSubmitData = () => {
		dispatch(setDeliveryModalIsOpen(false));
	};

	const handleError = text => {
		setError(text);
		setLoading(false);
	};

	useEffect(() => {
		const handleLoad = () => {
			const ymaps = window.ymaps;
			// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: store_coord –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–¥–æ–ª–≥–æ—Ç–∞,—à–∏—Ä–æ—Ç–∞", –∞ ymaps –æ–∂–∏–¥–∞–µ—Ç [—à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞]
			const coordsParts = store.store_coord.split(',');
			const storeCoords = [coordsParts[1].trim(), coordsParts[0].trim()]; // –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏!
			console.log(
				'üè™ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º–∞–≥–∞–∑–∏–Ω–∞ (store.store_coord):',
				store.store_coord
			);
			console.log('üè™ Parsed –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã [—à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞]:', storeCoords);
			const nalShippingCost = store.fix_cost_shipping;
			let lastRoute = null;

			const initMap = () => {
				const myMap = new ymaps.Map(mapRef.current, {
					center: storeCoords,
					zoom: 11,
					controls: [],
					behaviors: [],
				});

				// ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π SuggestView –±–µ–∑ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ provider
				// –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–æ–ª–µ–µ –≥–∏–±–∫–∏–π –ø–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–æ–≤
				const suggestView = new ymaps.SuggestView(suggestRef.current, {
					results: 10, // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–æ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
				});
				suggestView.events.add('select', function (e) {
					setLoading(true);
					ymaps.geocode(e.get('item').value).then(function (res) {
						const geoObject = res.geoObjects.get(0);
						const coords = geoObject.geometry.getCoordinates();
						console.log('üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞:', coords);
						const address_meta = geoObject.properties.get(
							'metaDataProperty.GeocoderMetaData'
						);
						const house = address_meta.Address.Components.find(function (
							it,
							i
						) {
							return it.kind === 'house';
						});

						if (lastRoute) myMap.geoObjects.remove(lastRoute);
						ymaps
							.route([storeCoords, coords], {
								mapStateAutoApply: true,
							})
							.then(function async(route) {
								const way = route.getPaths().get(0);
								const distanceKm = (way.getLength() / 1000).toFixed(1);
								console.log(
									'üöó –õ–∏–º–∏—Ç –¥–æ—Å—Ç–∞–≤–∫–∏:',
									store.limit_distance_shipping,
									'–∫–º'
								);
								console.log('üìç –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ø–æ –º–∞—Ä—à—Ä—É—Ç—É:', distanceKm, '–∫–º');
								console.log(
									'‚úÖ –î–æ—Å—Ç–∞–≤–∫–∞ –≤–æ–∑–º–æ–∂–Ω–∞?',
									+store.limit_distance_shipping >= +distanceKm
								);
								if (+store.limit_distance_shipping >= +distanceKm) {
									if (
										address_meta.precision === 'exact' ||
										(house && house.name)
									) {
										lastRoute = route;
										myMap.geoObjects.add(lastRoute);
										const displayName = geoObjectDisplayName(geoObject);
										console.log(
											'üèôÔ∏è –¢–µ–∫—É—â–∏–π –≥–æ—Ä–æ–¥ (store.current_city):',
											store.current_city
										);
										// geoObject.properties.get("text")
										if (!store.current_city || +store.current_city.key === 0) {
											console.log(
												'üí∞ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å:',
												nalShippingCost
											);
											handleSetData({
												address: displayName,
												costAddress: nalShippingCost,
											});
											handleError('');
										} else {
											console.log(
												'üöï –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å.–¢–∞–∫—Å–∏...'
											);
											const cb = setDataCb(displayName);
											calcBasedOnYaTaxi(storeCoords, coords, cb);
										}
									} else {
										handleError(
											'–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å —Å –Ω–æ–º–µ—Ä–æ–º –¥–æ–º–∞'
										);
									}
								} else {
									handleError(`
                    –î–æ—Å—Ç–∞–≤–∫–∞ –Ω–∞ —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.
                    –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏ ${store.limit_distance_shipping} –∫–º
                  `);
								}
							});
					});
				});
			};

			ymaps.ready(initMap);
			mapIsCreated.current = true;
		};

		if (!mapIsCreated.current) handleLoad();

		// window.addEventListener("load", handleLoad);
		// return () => {
		//   window.removeEventListener("load", handleLoad);
		// };
	}, []);

	return (
		<>
			<Row justify='space-between'>
				<Col xs={24} lg={12}>
					<div className={`${isDesktop ? 'pr-30' : ''}`}>
						<HeadingTitle title='–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏' level={4} />
						{/* <Alert
              message="–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å—Å—è —Å —Ç–µ—á–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏."
              type="info"
              showIcon
              className="mb-30"
            /> */}

						<div className='mb-30 mt-30'>
							<div>–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å</div>
							<input
								className='rn-input'
								ref={suggestRef}
								defaultValue={
									store.current_city?.label
										? `${store.current_city.label}, `
										: ''
								}
							/>
						</div>

						{loading ? <Spin className='mb-30' /> : ''}

						{error ? (
							<Alert message={error} type='error' showIcon className='mb-30' />
						) : costAddress ? (
							<>
								<Alert
									message={
										<HeadingTitle
											title={`–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: ${formatCurrency(
												costAddress
											)}`}
											level={5}
											style={{ margin: 0 }}
										/>
									}
									type='success'
									className='mb-30'
								/>
								<div className='mb-30'>
									<Button
										type='primary'
										block
										size='large'
										onClick={handleSubmitData}
									>
										–î–æ—Å—Ç–∞–≤–∏—Ç—å —Å—é–¥–∞
									</Button>
								</div>
							</>
						) : (
							''
						)}
					</div>
				</Col>
				<Col xs={24} lg={12}>
					<div className='rn-map' ref={mapRef} />
				</Col>
			</Row>
		</>
	);
};

export default DeliveryCalculate;
